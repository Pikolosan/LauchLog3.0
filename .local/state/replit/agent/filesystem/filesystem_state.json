{"file_contents":{"README.md":{"content":"\"# Launchlog2.0\" \n","size_bytes":18},"replit.md":{"content":"# LaunchLog\n\n## Overview\n\nLaunchLog is a career progress tracking application that serves as \"a launchpad for your career, logs all progress.\" It's a React-based single-page application built with modern web technologies, featuring a dark theme with neon accents and focusing on user experience through interactive dashboards and data visualization.\n\nThe application appears to be designed for professionals to track their career development, goals, and progress over time with visual analytics and an intuitive interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 19+ with Vite as the build tool and development server\n- **Styling**: Tailwind CSS for utility-first styling with custom CSS variables for theming\n- **UI Components**: Custom dark theme with neon blue (#00f3ff) and purple (#9d4edd) accents\n- **Icons**: Font Awesome for consistent iconography\n- **Build System**: Vite configured for hot module replacement and optimized production builds\n\n### Data Visualization\n- **Charts**: Chart.js with React integration via react-chartjs-2 for displaying career progress metrics\n- **Interactive Elements**: SortableJS for drag-and-drop functionality, likely for organizing goals or tasks\n\n### User Interface Design\n- **Theme**: Dark mode interface with glassmorphism effects (backdrop blur, semi-transparent backgrounds)\n- **Layout**: Sidebar navigation pattern with card-based content organization\n- **Responsive Design**: Mobile-first approach with viewport-aware styling\n- **Animations**: CSS transitions and hover effects for enhanced user experience\n\n### Development Environment\n- **Server Configuration**: Vite development server configured to run on port 5000\n- **Hot Reload**: Automatic refresh during development for improved developer experience\n\n## External Dependencies\n\n### Core Libraries\n- **React Ecosystem**: React 19.1.1 and React DOM for component-based UI development\n- **Build Tools**: Vite 7.1.4 with React plugin for fast development and building\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework loaded via CDN\n- **Font Awesome**: Icon library (both CDN and npm package versions)\n- **Custom CSS**: Theme variables and component styling for consistent branding\n\n### Data Visualization and Interaction\n- **Chart.js 4.5.0**: Comprehensive charting library for progress visualization\n- **react-chartjs-2 5.3.0**: React wrapper for Chart.js integration\n- **SortableJS 1.15.6**: Drag-and-drop functionality for interactive lists\n\n### Content Delivery\n- **CDN Dependencies**: Tailwind CSS and Font Awesome loaded from external CDNs for faster initial load times\n- **Static Assets**: Vite development server for serving application assets\n\nThe architecture prioritizes user experience with smooth animations, responsive design, and rich data visualization capabilities while maintaining a modern, professional aesthetic suitable for career tracking applications.","size_bytes":3010},"vite.config.js":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: true,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3001',\n        changeOrigin: true,\n        secure: false\n      }\n    }\n  },\n})","size_bytes":344},"src/App.jsx":{"content":"import { useState } from 'react'\nimport { useData } from './hooks/useData'\nimport Sidebar from './components/Sidebar'\nimport Dashboard from './components/Dashboard'\nimport Timer from './components/Timer'\nimport Plan from './components/Plan'\nimport Jobs from './components/Jobs'\nimport Cover from './components/Cover'\n\nfunction App() {\n  const [showCover, setShowCover] = useState(true)\n  const [activeSection, setActiveSection] = useState('dashboard')\n  const dataHook = useData()\n\n  const handleEnterApp = () => {\n    setShowCover(false)\n  }\n\n  const renderActiveSection = () => {\n    switch (activeSection) {\n      case 'timer':\n        return <Timer dataHook={dataHook} />\n      case 'plan':\n        return <Plan dataHook={dataHook} />\n      case 'jobs':\n        return <Jobs dataHook={dataHook} />\n      default:\n        return <Dashboard dataHook={dataHook} />\n    }\n  }\n\n  if (showCover) {\n    return <Cover onEnter={handleEnterApp} />\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar activeSection={activeSection} setActiveSection={setActiveSection} dataHook={dataHook} />\n      <main className=\"flex-1 ml-64 p-8 overflow-y-auto\">\n        {dataHook.loading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-soft-sky-blue mb-4 mx-auto\"></div>\n              <p className=\"text-secondary-text\">Loading your data...</p>\n            </div>\n          </div>\n        ) : (\n          renderActiveSection()\n        )}\n      </main>\n    </div>\n  )\n}\n\nexport default App","size_bytes":1632},"src/index.css":{"content":":root {\n  /* Base Dark Theme Backgrounds */\n  --primary-bg: #121212;\n  --surface-bg: #1E1E1E;\n  --elevated-bg: #2C2C2E;\n  \n  /* Accent Colors */\n  --soft-sky-blue: #4FC3F7;\n  --electric-indigo: #3F51B5;\n  --mint-green: #00C896;\n  --lime-accent: #AEEA00;\n  --peach-orange: #FFB74D;\n  --amber: #FFC107;\n  --soft-coral-red: #FF6F61;\n  \n  /* Text & Neutral Colors */\n  --primary-text: #E0E0E0;\n  --secondary-text: #B0B0B0;\n  --divider-lines: #3A3A3C;\n  --card-borders: #2F2F2F;\n  \n  /* Status Colors */\n  --status-todo: var(--soft-sky-blue);\n  --status-progress: var(--amber);\n  --status-completed: var(--mint-green);\n  --status-error: var(--soft-coral-red);\n}\n\nbody {\n  background-color: var(--primary-bg);\n  color: var(--primary-text);\n  font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  overflow-x: hidden;\n  margin: 0;\n  padding: 0;\n  line-height: 1.6;\n}\n\n/* Modern Sidebar */\n.sidebar {\n  background: linear-gradient(180deg, var(--surface-bg) 0%, var(--elevated-bg) 100%);\n  border-right: 1px solid var(--card-borders);\n  backdrop-filter: blur(20px);\n  box-shadow: 4px 0 20px rgba(0, 0, 0, 0.3);\n}\n\n.active-nav {\n  background: linear-gradient(90deg, var(--soft-sky-blue)20, transparent);\n  border-left: 4px solid var(--soft-sky-blue);\n  color: var(--soft-sky-blue);\n  box-shadow: inset 0 0 20px rgba(79, 195, 247, 0.1);\n}\n\n.nav-link {\n  border-radius: 12px;\n  margin: 4px 8px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.nav-link:hover {\n  background-color: var(--elevated-bg);\n  transform: translateX(4px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n/* Modern Cards */\n.card {\n  background: linear-gradient(145deg, var(--surface-bg) 0%, var(--elevated-bg) 100%);\n  border: 1px solid var(--card-borders);\n  border-radius: 16px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  backdrop-filter: blur(10px);\n}\n\n.card:hover {\n  transform: translateY(-8px) scale(1.02);\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n  border-color: var(--soft-sky-blue);\n  background: linear-gradient(145deg, var(--elevated-bg) 0%, var(--surface-bg) 100%);\n}\n\n/* Modern Buttons */\n.btn-primary {\n  background: linear-gradient(135deg, var(--soft-sky-blue) 0%, var(--electric-indigo) 100%);\n  border: none;\n  color: white;\n  font-weight: 600;\n  border-radius: 12px;\n  padding: 12px 24px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 4px 20px rgba(79, 195, 247, 0.3);\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 30px rgba(79, 195, 247, 0.5);\n  background: linear-gradient(135deg, var(--electric-indigo) 0%, var(--soft-sky-blue) 100%);\n}\n\n.btn-success {\n  background: linear-gradient(135deg, var(--mint-green) 0%, var(--lime-accent) 100%);\n  border: none;\n  color: var(--primary-bg);\n  font-weight: 600;\n  border-radius: 12px;\n  padding: 12px 24px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 4px 20px rgba(0, 200, 150, 0.3);\n}\n\n.btn-success:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 30px rgba(0, 200, 150, 0.5);\n}\n\n.btn-warning {\n  background: linear-gradient(135deg, var(--peach-orange) 0%, var(--amber) 100%);\n  border: none;\n  color: var(--primary-bg);\n  font-weight: 600;\n  border-radius: 12px;\n  padding: 12px 24px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 4px 20px rgba(255, 183, 77, 0.3);\n}\n\n.btn-danger {\n  background: linear-gradient(135deg, var(--soft-coral-red) 0%, #FF4444 100%);\n  border: none;\n  color: white;\n  font-weight: 600;\n  border-radius: 12px;\n  padding: 12px 24px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 4px 20px rgba(255, 111, 97, 0.3);\n}\n\n.btn-secondary {\n  background: var(--elevated-bg);\n  border: 1px solid var(--card-borders);\n  color: var(--primary-text);\n  font-weight: 500;\n  border-radius: 12px;\n  padding: 12px 24px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.btn-secondary:hover {\n  background: var(--surface-bg);\n  border-color: var(--soft-sky-blue);\n  transform: translateY(-1px);\n}\n\n/* Legacy button support */\n.btn-neon {\n  background: linear-gradient(135deg, var(--soft-sky-blue) 0%, var(--electric-indigo) 100%);\n  border: none;\n  color: white;\n  font-weight: 600;\n  border-radius: 12px;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0 4px 20px rgba(79, 195, 247, 0.3);\n}\n\n.btn-neon:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 30px rgba(79, 195, 247, 0.5);\n}\n\n/* Modern Form Elements */\ninput, select, textarea {\n  background: var(--elevated-bg) !important;\n  border: 1px solid var(--card-borders) !important;\n  border-radius: 12px !important;\n  color: var(--primary-text) !important;\n  padding: 12px 16px !important;\n  transition: all 0.3s ease !important;\n}\n\ninput:focus, select:focus, textarea:focus {\n  outline: none !important;\n  border-color: var(--soft-sky-blue) !important;\n  box-shadow: 0 0 0 3px rgba(79, 195, 247, 0.2) !important;\n  background: var(--surface-bg) !important;\n}\n\n/* Modern Kanban Board */\n.kanban-column {\n  background: linear-gradient(145deg, var(--surface-bg) 0%, var(--elevated-bg) 100%);\n  border: 1px solid var(--card-borders);\n  border-radius: 16px;\n  min-height: 300px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.kanban-column:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);\n}\n\n.task-card {\n  background: var(--elevated-bg);\n  border: 1px solid var(--card-borders);\n  border-radius: 12px;\n  transition: all 0.3s ease;\n  cursor: grab;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n}\n\n.task-card:hover {\n  background: var(--surface-bg);\n  border-color: var(--soft-sky-blue);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);\n}\n\n.task-card:active {\n  cursor: grabbing;\n  transform: scale(1.05);\n}\n\n/* Modern Timer Display */\n.timer-display {\n  font-size: 4rem;\n  font-weight: 700;\n  letter-spacing: 4px;\n  font-family: 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', monospace;\n  background: linear-gradient(135deg, var(--soft-sky-blue) 0%, var(--lime-accent) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  text-shadow: 0 0 30px rgba(79, 195, 247, 0.5);\n}\n\n/* Modern Progress Bars */\n.progress-bar {\n  background: var(--elevated-bg);\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.2);\n}\n\n.progress-fill {\n  background: linear-gradient(90deg, var(--soft-sky-blue) 0%, var(--lime-accent) 100%);\n  border-radius: 12px;\n  transition: all 0.5s ease;\n  box-shadow: 0 0 20px rgba(79, 195, 247, 0.3);\n}\n\n/* Status Badges */\n.status-applied {\n  background: linear-gradient(135deg, var(--soft-sky-blue), var(--electric-indigo));\n  color: white;\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  box-shadow: 0 2px 8px rgba(79, 195, 247, 0.3);\n}\n\n.status-interview {\n  background: linear-gradient(135deg, var(--amber), var(--peach-orange));\n  color: var(--primary-bg);\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  box-shadow: 0 2px 8px rgba(255, 193, 7, 0.3);\n}\n\n.status-placed {\n  background: linear-gradient(135deg, var(--mint-green), var(--lime-accent));\n  color: var(--primary-bg);\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  box-shadow: 0 2px 8px rgba(0, 200, 150, 0.3);\n}\n\n.status-rejected {\n  background: linear-gradient(135deg, var(--soft-coral-red), #FF4444);\n  color: white;\n  border-radius: 20px;\n  padding: 6px 12px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  box-shadow: 0 2px 8px rgba(255, 111, 97, 0.3);\n}\n\n/* Page Transitions */\n.content-section {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Modern Gradient Text */\n.welcome-gradient {\n  background: linear-gradient(-45deg, var(--soft-sky-blue), var(--lime-accent), var(--mint-green), var(--electric-indigo));\n  background-size: 400% 400%;\n  animation: modernGradient 8s ease infinite;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n@keyframes modernGradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Modern Table Styling */\ntable {\n  border-collapse: separate;\n  border-spacing: 0;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nth {\n  background: linear-gradient(135deg, var(--elevated-bg) 0%, var(--surface-bg) 100%);\n  color: var(--primary-text);\n  font-weight: 600;\n  border-bottom: 2px solid var(--card-borders);\n}\n\ntd {\n  border-bottom: 1px solid var(--divider-lines);\n  transition: all 0.3s ease;\n}\n\ntr:hover td {\n  background: var(--elevated-bg);\n}\n\n/* Modern Scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--surface-bg);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, var(--soft-sky-blue), var(--electric-indigo));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, var(--electric-indigo), var(--soft-sky-blue));\n}\n\n/* Text Colors */\n.text-primary { color: var(--primary-text); }\n.text-secondary { color: var(--secondary-text); }\n.text-success { color: var(--mint-green); }\n.text-warning { color: var(--amber); }\n.text-danger { color: var(--soft-coral-red); }\n.text-info { color: var(--soft-sky-blue); }\n\n/* Modern Stats Cards */\n.stat-card {\n  background: linear-gradient(145deg, var(--surface-bg) 0%, var(--elevated-bg) 100%);\n  border: 1px solid var(--card-borders);\n  border-radius: 20px;\n  padding: 24px;\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  overflow: hidden;\n}\n\n.stat-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 4px;\n  background: linear-gradient(90deg, var(--soft-sky-blue), var(--lime-accent));\n  transform: scaleX(0);\n  transition: transform 0.3s ease;\n}\n\n.stat-card:hover::before {\n  transform: scaleX(1);\n}\n\n.stat-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n}\n\n/* Cover Page Styles */\n.cover-page {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: linear-gradient(135deg, var(--primary-bg) 0%, var(--surface-bg) 50%, var(--elevated-bg) 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  overflow: hidden;\n  animation: coverFadeIn 1s ease-out;\n}\n\n.cover-page.cover-exit {\n  animation: coverFadeOut 0.8s ease-in forwards;\n}\n\n.cover-content {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.cover-bg-elements {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  overflow: hidden;\n}\n\n.floating-element {\n  position: absolute;\n  color: var(--soft-sky-blue);\n  font-size: 2rem;\n  opacity: 0.1;\n  animation: float 6s ease-in-out infinite;\n}\n\n.element-1 {\n  top: 10%;\n  left: 15%;\n  animation-delay: 0s;\n  color: var(--mint-green);\n}\n\n.element-2 {\n  top: 20%;\n  right: 20%;\n  animation-delay: 1s;\n  color: var(--soft-sky-blue);\n}\n\n.element-3 {\n  bottom: 30%;\n  left: 10%;\n  animation-delay: 2s;\n  color: var(--peach-orange);\n}\n\n.element-4 {\n  top: 60%;\n  right: 15%;\n  animation-delay: 3s;\n  color: var(--lime-accent);\n}\n\n.element-5 {\n  bottom: 15%;\n  right: 30%;\n  animation-delay: 4s;\n  color: var(--electric-indigo);\n}\n\n.element-6 {\n  top: 40%;\n  left: 5%;\n  animation-delay: 5s;\n  color: var(--amber);\n}\n\n.cover-main {\n  text-align: center;\n  max-width: 600px;\n  padding: 2rem;\n  animation: coverSlideUp 1.2s ease-out;\n}\n\n.cover-logo {\n  margin-bottom: 3rem;\n}\n\n.logo-icon {\n  font-size: 4rem;\n  background: linear-gradient(135deg, var(--soft-sky-blue), var(--lime-accent));\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin-bottom: 1rem;\n  animation: logoRotate 3s ease-in-out infinite;\n}\n\n.logo-text {\n  font-size: 4rem;\n  font-weight: 900;\n  background: linear-gradient(-45deg, var(--soft-sky-blue), var(--lime-accent), var(--mint-green), var(--electric-indigo));\n  background-size: 400% 400%;\n  animation: modernGradient 3s ease infinite;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin: 0;\n  letter-spacing: -2px;\n}\n\n.cover-tagline {\n  margin-bottom: 3rem;\n}\n\n.tagline-main {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: var(--primary-text);\n  margin-bottom: 0.5rem;\n  animation: fadeInUp 1.5s ease-out;\n}\n\n.tagline-sub {\n  font-size: 1.2rem;\n  color: var(--soft-sky-blue);\n  font-weight: 500;\n  animation: fadeInUp 1.7s ease-out;\n}\n\n.cover-features {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1.5rem;\n  margin-bottom: 3rem;\n  animation: fadeInUp 1.9s ease-out;\n}\n\n.feature-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 1rem;\n  background: linear-gradient(145deg, var(--surface-bg), var(--elevated-bg));\n  border-radius: 16px;\n  border: 1px solid var(--card-borders);\n  transition: all 0.3s ease;\n}\n\n.feature-item:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);\n  border-color: var(--soft-sky-blue);\n}\n\n.feature-item i {\n  font-size: 1.5rem;\n  color: var(--soft-sky-blue);\n}\n\n.feature-item span {\n  font-size: 0.9rem;\n  font-weight: 600;\n  color: var(--primary-text);\n}\n\n.cover-enter-btn {\n  background: linear-gradient(135deg, var(--soft-sky-blue), var(--lime-accent));\n  border: none;\n  padding: 1rem 2.5rem;\n  border-radius: 50px;\n  font-size: 1.2rem;\n  font-weight: 700;\n  color: white;\n  cursor: pointer;\n  transition: all 0.4s ease;\n  display: inline-flex;\n  align-items: center;\n  gap: 1rem;\n  box-shadow: 0 8px 32px rgba(79, 195, 247, 0.3);\n  margin-bottom: 2rem;\n  animation: fadeInUp 2.1s ease-out, pulse 2s ease-in-out infinite;\n}\n\n.cover-enter-btn:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 16px 48px rgba(79, 195, 247, 0.5);\n  background: linear-gradient(135deg, var(--lime-accent), var(--soft-sky-blue));\n}\n\n.cover-enter-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.cover-footer {\n  animation: fadeInUp 2.3s ease-out;\n}\n\n.cover-footer p {\n  color: var(--secondary-text);\n  font-size: 0.9rem;\n}\n\n/* Cover Page Animations */\n@keyframes coverFadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes coverFadeOut {\n  to {\n    opacity: 0;\n    transform: scale(1.1);\n  }\n}\n\n@keyframes coverSlideUp {\n  from {\n    opacity: 0;\n    transform: translateY(60px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px) rotate(0deg);\n  }\n  50% {\n    transform: translateY(-20px) rotate(180deg);\n  }\n}\n\n@keyframes logoRotate {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(5deg);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    box-shadow: 0 8px 32px rgba(79, 195, 247, 0.3);\n  }\n  50% {\n    box-shadow: 0 8px 32px rgba(79, 195, 247, 0.6);\n  }\n}\n\n/* Responsive Cover Page */\n@media (max-width: 768px) {\n  .logo-text {\n    font-size: 3rem;\n  }\n  \n  .tagline-main {\n    font-size: 1.2rem;\n  }\n  \n  .tagline-sub {\n    font-size: 1rem;\n  }\n  \n  .cover-features {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .cover-enter-btn {\n    font-size: 1rem;\n    padding: 0.8rem 2rem;\n  }\n}","size_bytes":15780},"src/main.jsx":{"content":"import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)","size_bytes":228},"src/components/Dashboard.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js'\nimport { Doughnut } from 'react-chartjs-2'\n\nChartJS.register(ArcElement, Tooltip, Legend)\n\nconst Dashboard = ({ dataHook }) => {\n  const [stats, setStats] = useState({\n    totalTimeFocused: '0 hours',\n    daysFocused: '0 days',\n    bestDay: '0 hours',\n    bestDayDate: 'Not enough data',\n    currentStreak: '0 days',\n    maxStreak: '0',\n    bestWeek: '0 hours',\n    bestWeekDate: 'Not enough data',\n    bestMonth: '0 hours',\n    bestMonthDate: 'Not enough data',\n    jobsAppliedCount: '0 applications',\n    interviewCount: '0'\n  })\n\n  useEffect(() => {\n    if (dataHook && dataHook.data) {\n      const { timerSessions, jobs } = dataHook.data\n      const totalMinutes = timerSessions.reduce((total, session) => total + (session.duration || 0), 0)\n      const totalHours = Math.floor(totalMinutes / 60)\n      const uniqueDays = new Set(timerSessions.map(session => session.date?.split('T')[0])).size\n      const interviews = jobs.filter(job => job.status === 'Interview').length\n\n      setStats(prev => ({\n        ...prev,\n        totalTimeFocused: `${totalHours} hours`,\n        daysFocused: `${uniqueDays} days`,\n        jobsAppliedCount: `${jobs.length} applications`,\n        interviewCount: interviews.toString()\n      }))\n    }\n  }, [dataHook?.data])\n\n  const renderSubjectChart = () => {\n    const sessions = dataHook?.data?.timerSessions || []\n    \n    if (sessions.length === 0) {\n      return (\n        <div className=\"flex items-center justify-center h-full text-secondary-text\">\n          No focus sessions recorded yet\n        </div>\n      )\n    }\n\n    const subjectTotals = {}\n    sessions.forEach(session => {\n      if (session.subject && session.duration) {\n        subjectTotals[session.subject] = (subjectTotals[session.subject] || 0) + session.duration\n      }\n    })\n\n    const subjects = Object.keys(subjectTotals)\n    const hoursData = Object.values(subjectTotals).map(m => (m / 60).toFixed(1))\n\n    const colors = [\n      'rgba(0, 243, 255, 0.7)',\n      'rgba(157, 78, 221, 0.7)',\n      'rgba(255, 99, 132, 0.7)',\n      'rgba(54, 162, 235, 0.7)',\n      'rgba(255, 206, 86, 0.7)',\n      'rgba(75, 192, 192, 0.7)',\n      'rgba(153, 102, 255, 0.7)'\n    ]\n\n    const data = {\n      labels: subjects,\n      datasets: [{\n        data: hoursData,\n        backgroundColor: colors,\n        borderColor: 'rgba(30, 30, 30, 0.8)',\n        borderWidth: 1\n      }]\n    }\n\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'right',\n          labels: {\n            color: '#f0f0f0',\n            padding: 10,\n            usePointStyle: true\n          }\n        },\n        tooltip: {\n          callbacks: {\n            label: function(context) {\n              return `${context.label}: ${context.raw} hours`\n            }\n          }\n        }\n      },\n      cutout: '60%'\n    }\n\n    return <Doughnut data={data} options={options} />\n  }\n\n  const renderActivityHeatmap = () => {\n    const sessions = JSON.parse(localStorage.getItem('placeTrackSessions')) || []\n    \n    const dayTotals = {}\n    sessions.forEach(session => {\n      if (session.date) {\n        const day = session.date.split('T')[0]\n        dayTotals[day] = (dayTotals[day] || 0) + (session.duration || 0)\n      }\n    })\n\n    const days = []\n    const today = new Date()\n    \n    for (let i = 27; i >= 0; i--) {\n      const date = new Date()\n      date.setDate(today.getDate() - i)\n      days.push(date.toISOString().split('T')[0])\n    }\n\n    return days.map((day, index) => {\n      const minutes = dayTotals[day] || 0\n      let intensity = 0\n      \n      if (minutes > 0) {\n        if (minutes < 30) intensity = 1\n        else if (minutes < 60) intensity = 2\n        else if (minutes < 120) intensity = 3\n        else intensity = 4\n      }\n      \n      const intensityClasses = {\n        0: 'bg-gray-800',\n        1: 'bg-blue-900',\n        2: 'bg-blue-700', \n        3: 'bg-blue-500',\n        4: 'bg-blue-300'\n      }\n      \n      return (\n        <div\n          key={day}\n          className={`w-4 h-4 rounded-sm ${intensityClasses[intensity]}`}\n          title={`${new Date(day).toLocaleDateString()}: ${(minutes / 60).toFixed(1)} hours`}\n        />\n      )\n    })\n  }\n\n  return (\n    <section className=\"content-section\">\n      <h2 className=\"text-3xl font-bold mb-6 welcome-gradient\">Dashboard Overview</h2>\n      \n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <div className=\"stat-card\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-secondary text-sm font-medium\">Total Time Focused</h3>\n            <i className=\"fas fa-clock text-info text-lg\"></i>\n          </div>\n          <p className=\"text-3xl font-bold text-primary mb-2\">{stats.totalTimeFocused}</p>\n          <div className=\"flex items-center text-xs text-success\">\n            <i className=\"fas fa-arrow-up mr-1\"></i>\n            <span>Since you started tracking</span>\n          </div>\n        </div>\n\n        <div className=\"stat-card\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-secondary text-sm font-medium\">Days Focused</h3>\n            <i className=\"fas fa-calendar-alt text-warning text-lg\"></i>\n          </div>\n          <p className=\"text-3xl font-bold text-primary mb-2\">{stats.daysFocused}</p>\n          <div className=\"flex items-center text-xs text-info\">\n            <i className=\"fas fa-calendar mr-1\"></i>\n            <span>Total days with activity</span>\n          </div>\n        </div>\n\n        <div className=\"stat-card\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-secondary text-sm font-medium\">Best Day</h3>\n            <i className=\"fas fa-trophy text-warning text-lg\"></i>\n          </div>\n          <p className=\"text-3xl font-bold text-primary mb-2\">{stats.bestDay}</p>\n          <div className=\"flex items-center text-xs text-secondary\">\n            <i className=\"fas fa-star mr-1\"></i>\n            <span>{stats.bestDayDate}</span>\n          </div>\n        </div>\n\n        <div className=\"stat-card\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-secondary text-sm font-medium\">Current Streak</h3>\n            <i className=\"fas fa-fire text-danger text-lg\"></i>\n          </div>\n          <p className=\"text-3xl font-bold text-primary mb-2\">{stats.currentStreak}</p>\n          <div className=\"flex items-center text-xs text-secondary\">\n            <i className=\"fas fa-bolt mr-1\"></i>\n            <span>Max: {stats.maxStreak} days</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"stat-card\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-secondary text-sm font-medium\">Best Week</h3>\n            <i className=\"fas fa-calendar-week text-info text-lg\"></i>\n          </div>\n          <p className=\"text-3xl font-bold text-primary mb-2\">{stats.bestWeek}</p>\n          <div className=\"flex items-center text-xs text-secondary\">\n            <i className=\"fas fa-chart-line mr-1\"></i>\n            <span>{stats.bestWeekDate}</span>\n          </div>\n        </div>\n\n        <div className=\"stat-card\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-secondary text-sm font-medium\">Best Month</h3>\n            <i className=\"fas fa-calendar-alt text-success text-lg\"></i>\n          </div>\n          <p className=\"text-3xl font-bold text-primary mb-2\">{stats.bestMonth}</p>\n          <div className=\"flex items-center text-xs text-secondary\">\n            <i className=\"fas fa-medal mr-1\"></i>\n            <span>{stats.bestMonthDate}</span>\n          </div>\n        </div>\n\n        <div className=\"stat-card\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-secondary text-sm font-medium\">Jobs Applied</h3>\n            <i className=\"fas fa-briefcase text-warning text-lg\"></i>\n          </div>\n          <p className=\"text-3xl font-bold text-primary mb-2\">{stats.jobsAppliedCount}</p>\n          <div className=\"flex items-center text-xs text-success\">\n            <i className=\"fas fa-handshake mr-1\"></i>\n            <span>{stats.interviewCount} interviews scheduled</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Charts Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        {/* Subject Distribution Pie Chart */}\n        <div className=\"card p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-primary text-lg font-semibold\">Time Distribution by Subject</h3>\n            <i className=\"fas fa-chart-pie text-info text-lg\"></i>\n          </div>\n          <div className=\"h-64\">\n            {renderSubjectChart()}\n          </div>\n        </div>\n\n        {/* Activity Heatmap */}\n        <div className=\"card p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-primary text-lg font-semibold\">Focus Activity Heatmap</h3>\n            <i className=\"fas fa-fire text-warning text-lg\"></i>\n          </div>\n          <div className=\"h-64 flex items-center justify-center\">\n            <div className=\"grid grid-cols-7 gap-2\">\n              {renderActivityHeatmap()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Dashboard","size_bytes":9750},"src/components/Jobs.jsx":{"content":"import { useState, useEffect } from 'react'\n\nconst Jobs = () => {\n  const [jobs, setJobs] = useState([])\n  const [filteredJobs, setFilteredJobs] = useState([])\n  const [jobForm, setJobForm] = useState({\n    title: '',\n    company: '',\n    dateApplied: '',\n    status: 'Applied',\n    notes: ''\n  })\n  const [statusFilter, setStatusFilter] = useState('All')\n  const [sortBy, setSortBy] = useState('dateDesc')\n  const [editingJobId, setEditingJobId] = useState(null)\n\n  useEffect(() => {\n    loadJobs()\n  }, [])\n\n  useEffect(() => {\n    applyFiltersAndSort()\n  }, [jobs, statusFilter, sortBy])\n\n  const loadJobs = () => {\n    const savedJobs = JSON.parse(localStorage.getItem('placeTrackJobs')) || []\n    setJobs(savedJobs)\n  }\n\n  const saveJobs = (newJobs) => {\n    localStorage.setItem('placeTrackJobs', JSON.stringify(newJobs))\n    setJobs(newJobs)\n  }\n\n  const applyFiltersAndSort = () => {\n    let filtered = jobs\n    \n    if (statusFilter !== 'All') {\n      filtered = jobs.filter(job => job.status === statusFilter)\n    }\n    filtered.sort((a, b) => {\n      switch(sortBy) {\n        case 'dateAsc':\n          return new Date(a.dateApplied) - new Date(b.dateApplied)\n        case 'company':\n          return a.company.localeCompare(b.company)\n        case 'status':\n          return a.status.localeCompare(b.status)\n        case 'dateDesc':\n        default:\n          return new Date(b.dateApplied) - new Date(a.dateApplied)\n      }\n    })\n    \n    setFilteredJobs(filtered)\n  }\n\n  const addJob = (e) => {\n    e.preventDefault()\n    \n    if (!jobForm.title || !jobForm.company || !jobForm.dateApplied) return\n    \n    const job = {\n      id: editingJobId || Date.now().toString(),\n      title: jobForm.title,\n      company: jobForm.company,\n      dateApplied: jobForm.dateApplied,\n      status: jobForm.status,\n      notes: jobForm.notes || '',\n      createdAt: new Date().toISOString()\n    }\n    \n    let newJobs\n    if (editingJobId) {\n      newJobs = jobs.map(j => j.id === editingJobId ? job : j)\n      setEditingJobId(null)\n    } else {\n      newJobs = [...jobs, job]\n    }\n    \n    saveJobs(newJobs)\n    \n    setJobForm({\n      title: '',\n      company: '',\n      dateApplied: '',\n      status: 'Applied',\n      notes: ''\n    })\n  }\n\n  const editJob = (jobId) => {\n    const job = jobs.find(job => job.id === jobId)\n    if (!job) return\n    \n    setJobForm({\n      title: job.title,\n      company: job.company,\n      dateApplied: job.dateApplied,\n      status: job.status,\n      notes: job.notes\n    })\n    \n    setEditingJobId(jobId)\n  }\n\n  const deleteJob = (jobId) => {\n    const newJobs = jobs.filter(job => job.id !== jobId)\n    saveJobs(newJobs)\n  }\n\n  const getStatusBadge = (status) => {\n    const styles = {\n      Applied: { class: 'status-applied', icon: 'fa-paper-plane' },\n      Interview: { class: 'status-interview', icon: 'fa-calendar-check' },\n      Rejected: { class: 'status-rejected', icon: 'fa-times-circle' },\n      Placed: { class: 'status-placed', icon: 'fa-check-circle' }\n    }\n    \n    const style = styles[status] || styles.Applied\n    \n    return (\n      <span className={`${style.class} inline-flex items-center`}>\n        <i className={`fas ${style.icon} mr-2`}></i>\n        {status}\n      </span>\n    )\n  }\n\n  return (\n    <section className=\"content-section\">\n      <h2 className=\"text-3xl font-bold mb-6\">Job Applications Tracker</h2>\n      \n      {/* Add New Job Form */}\n      <div className=\"card p-8 mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-2xl font-bold text-primary\">\n            {editingJobId ? 'Edit Job Application' : 'Add New Job Application'}\n          </h3>\n          <i className=\"fas fa-plus-circle text-info text-2xl\"></i>\n        </div>\n        \n        <form onSubmit={addJob} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-400 mb-1\">Job Title</label>\n              <input \n                type=\"text\" \n                value={jobForm.title}\n                onChange={(e) => setJobForm({ ...jobForm, title: e.target.value })}\n                className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                placeholder=\"Software Engineer\" \n                required \n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-400 mb-1\">Company</label>\n              <input \n                type=\"text\" \n                value={jobForm.company}\n                onChange={(e) => setJobForm({ ...jobForm, company: e.target.value })}\n                className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                placeholder=\"Google\" \n                required \n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-400 mb-1\">Date Applied</label>\n              <input \n                type=\"date\" \n                value={jobForm.dateApplied}\n                onChange={(e) => setJobForm({ ...jobForm, dateApplied: e.target.value })}\n                className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                required \n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-400 mb-1\">Status</label>\n              <select \n                value={jobForm.status}\n                onChange={(e) => setJobForm({ ...jobForm, status: e.target.value })}\n                className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                required\n              >\n                <option value=\"Applied\">Applied</option>\n                <option value=\"Interview\">Interview Scheduled</option>\n                <option value=\"Rejected\">Rejected</option>\n                <option value=\"Placed\">Placed</option>\n              </select>\n            </div>\n            \n            <div className=\"md:col-span-2\">\n              <label className=\"block text-sm font-medium text-gray-400 mb-1\">Notes</label>\n              <textarea \n                rows=\"1\" \n                value={jobForm.notes}\n                onChange={(e) => setJobForm({ ...jobForm, notes: e.target.value })}\n                className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                placeholder=\"Any additional notes...\"\n              ></textarea>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-4\">\n            {editingJobId && (\n              <button \n                type=\"button\"\n                onClick={() => {\n                  setEditingJobId(null)\n                  setJobForm({\n                    title: '',\n                    company: '',\n                    dateApplied: '',\n                    status: 'Applied',\n                    notes: ''\n                  })\n                }}\n                className=\"btn-secondary px-6 py-3\"\n              >\n                Cancel\n              </button>\n            )}\n            <button type=\"submit\" className=\"btn-success px-8 py-3\">\n              <i className=\"fas fa-plus mr-2\"></i> {editingJobId ? 'Update Job' : 'Add Job'}\n            </button>\n          </div>\n        </form>\n      </div>\n      \n      {/* Filter Options */}\n      <div className=\"mb-8 flex flex-wrap gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-400 mb-1\">Filter by Status</label>\n          <select \n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n            className=\"bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"All\">All Status</option>\n            <option value=\"Applied\">Applied</option>\n            <option value=\"Interview\">Interview</option>\n            <option value=\"Rejected\">Rejected</option>\n            <option value=\"Placed\">Placed</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-400 mb-1\">Sort by</label>\n          <select \n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value)}\n            className=\"bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"dateDesc\">Date (Newest)</option>\n            <option value=\"dateAsc\">Date (Oldest)</option>\n            <option value=\"company\">Company</option>\n            <option value=\"status\">Status</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Jobs List */}\n      <div className=\"card overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"text-left\">\n              <tr>\n                <th className=\"px-6 py-5 font-semibold text-primary\">Job Title</th>\n                <th className=\"px-6 py-5 font-semibold text-primary\">Company</th>\n                <th className=\"px-6 py-5 font-semibold text-primary\">Date Applied</th>\n                <th className=\"px-6 py-5 font-semibold text-primary\">Status</th>\n                <th className=\"px-6 py-5 font-semibold text-primary\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredJobs.length === 0 ? (\n                <tr>\n                  <td colSpan=\"5\" className=\"px-6 py-16 text-center text-secondary\">\n                    <i className=\"fas fa-briefcase text-4xl mb-4 opacity-50 block\"></i>\n                    <p>{statusFilter !== 'All' ? 'No jobs match the selected filter' : 'No job applications added yet'}</p>\n                  </td>\n                </tr>\n              ) : (\n                filteredJobs.map((job) => (\n                  <tr key={job.id}>\n                    <td className=\"px-6 py-5\">\n                      <div className=\"font-semibold text-primary\">{job.title}</div>\n                    </td>\n                    <td className=\"px-6 py-5 text-secondary\">{job.company}</td>\n                    <td className=\"px-6 py-5 text-secondary\">{new Date(job.dateApplied).toLocaleDateString()}</td>\n                    <td className=\"px-6 py-5\">\n                      {getStatusBadge(job.status)}\n                    </td>\n                    <td className=\"px-6 py-5\">\n                      <div className=\"flex space-x-3\">\n                        <button \n                          onClick={() => editJob(job.id)}\n                          className=\"p-2 text-info hover:text-success transition-colors rounded-lg hover:bg-elevated-bg\"\n                          title=\"Edit job\"\n                        >\n                          <i className=\"fas fa-edit\"></i>\n                        </button>\n                        <button \n                          onClick={() => deleteJob(job.id)}\n                          className=\"p-2 text-danger hover:text-soft-coral-red transition-colors rounded-lg hover:bg-elevated-bg\"\n                          title=\"Delete job\"\n                        >\n                          <i className=\"fas fa-trash-alt\"></i>\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Jobs","size_bytes":11816},"src/components/Plan.jsx":{"content":"import { useState, useEffect, useRef } from 'react'\nimport Sortable from 'sortablejs'\n\nconst Plan = () => {\n  const [tasks, setTasks] = useState({ todo: [], inProgress: [], completed: [] })\n  const [taskForm, setTaskForm] = useState({ title: '', description: '', dueDate: '' })\n  \n  const todoRef = useRef(null)\n  const progressRef = useRef(null)\n  const completedRef = useRef(null)\n  const sortablesRef = useRef([])\n\n  useEffect(() => {\n    loadTasks()\n  }, [])\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      initSortable()\n    }, 100)\n    \n    return () => {\n      clearTimeout(timer)\n      sortablesRef.current.forEach(sortable => {\n        try {\n          sortable.destroy()\n        } catch (e) {\n          // Ignore destroy errors\n        }\n      })\n      sortablesRef.current = []\n    }\n  }, [tasks])\n\n  const loadTasks = () => {\n    const savedTasks = JSON.parse(localStorage.getItem('placeTrackTasks')) || { todo: [], inProgress: [], completed: [] }\n    setTasks(savedTasks)\n  }\n\n  const saveTasks = (newTasks) => {\n    localStorage.setItem('placeTrackTasks', JSON.stringify(newTasks))\n    setTasks(newTasks)\n  }\n\n  const initSortable = () => {\n    // Clean up existing sortables\n    sortablesRef.current.forEach(sortable => {\n      try {\n        sortable.destroy()\n      } catch (e) {\n        // Ignore destroy errors\n      }\n    })\n    sortablesRef.current = []\n\n    const containers = [\n      { ref: todoRef, column: 'todo' },\n      { ref: progressRef, column: 'inProgress' },\n      { ref: completedRef, column: 'completed' }\n    ]\n\n    containers.forEach(({ ref, column }) => {\n      if (ref.current) {\n        const sortable = new Sortable(ref.current, {\n          group: 'tasks',\n          animation: 150,\n          ghostClass: 'bg-gray-700',\n          chosenClass: 'bg-gray-600',\n          dragClass: 'bg-gray-500',\n          // Prevent SortableJS from manipulating DOM directly\n          sort: false,\n          // Use clone instead of moving elements\n          onStart: (evt) => {\n            evt.item.style.opacity = '0.5'\n          },\n          onEnd: (evt) => {\n            evt.item.style.opacity = ''\n            \n            const taskId = evt.item.getAttribute('data-id')\n            const fromColumn = getColumnFromElement(evt.from)\n            const toColumn = getColumnFromElement(evt.to)\n            \n            // Prevent default SortableJS behavior and handle with React\n            if (fromColumn !== toColumn && taskId) {\n              // Move back the DOM element to prevent conflicts\n              if (evt.from !== evt.to) {\n                evt.from.insertBefore(evt.item, evt.from.children[evt.oldIndex])\n              }\n              // Let React handle the state change\n              moveTask(taskId, fromColumn, toColumn)\n            }\n          }\n        })\n        sortablesRef.current.push(sortable)\n      }\n    })\n  }\n\n  const getColumnFromElement = (element) => {\n    if (element === todoRef.current) return 'todo'\n    if (element === progressRef.current) return 'inProgress'\n    if (element === completedRef.current) return 'completed'\n    return 'todo'\n  }\n\n  const moveTask = (taskId, fromColumn, toColumn) => {\n    if (fromColumn === toColumn) return\n    \n    setTasks(currentTasks => {\n      const newTasks = { ...currentTasks }\n      const taskIndex = newTasks[fromColumn].findIndex(task => task.id === taskId)\n      \n      if (taskIndex !== -1) {\n        const task = { ...newTasks[fromColumn][taskIndex] }\n        newTasks[fromColumn] = newTasks[fromColumn].filter(t => t.id !== taskId)\n        newTasks[toColumn] = [...newTasks[toColumn], task]\n\n        localStorage.setItem('placeTrackTasks', JSON.stringify(newTasks))\n        return newTasks\n      }\n      return currentTasks\n    })\n  }\n\n  const addTask = (e) => {\n    e.preventDefault()\n    \n    if (!taskForm.title) return\n    \n    const task = {\n      id: Date.now().toString(),\n      title: taskForm.title,\n      description: taskForm.description || '',\n      dueDate: taskForm.dueDate || '',\n      createdAt: new Date().toISOString()\n    }\n    \n    const newTasks = { ...tasks }\n    newTasks.todo.push(task)\n    saveTasks(newTasks)\n    \n    setTaskForm({ title: '', description: '', dueDate: '' })\n  }\n\n  const deleteTask = (taskId) => {\n    const newTasks = { ...tasks }\n    for (const column of ['todo', 'inProgress', 'completed']) {\n      const index = newTasks[column].findIndex(task => task.id === taskId)\n      if (index !== -1) {\n        newTasks[column].splice(index, 1)\n        saveTasks(newTasks)\n        break\n      }\n    }\n  }\n\n  const renderTask = (task) => {\n    let dueDateDisplay = null\n    if (task.dueDate) {\n      const dueDate = new Date(task.dueDate)\n      const today = new Date()\n      today.setHours(0, 0, 0, 0)\n      \n      const isPast = dueDate < today\n      const isToday = dueDate.toDateString() === today.toDateString()\n      \n      let dateClass = ''\n      if (isPast) dateClass = 'text-danger'\n      else if (isToday) dateClass = 'text-warning'\n      else dateClass = 'text-info'\n      \n      dueDateDisplay = (\n        <div className={`flex items-center ${dateClass} text-xs mt-3`}>\n          <i className=\"fas fa-calendar-alt mr-2\"></i>\n          <span>Due: {dueDate.toLocaleDateString()}</span>\n        </div>\n      )\n    }\n    \n    return (\n      <div key={task.id} className=\"task-card p-4\" data-id={task.id}>\n        <div className=\"flex justify-between items-start mb-2\">\n          <h4 className=\"font-semibold text-primary text-sm\">{task.title}</h4>\n          <button \n            onClick={(e) => {\n              e.stopPropagation()\n              deleteTask(task.id)\n            }}\n            className=\"text-secondary hover:text-danger transition-colors p-1 rounded\"\n            title=\"Delete task\"\n          >\n            <i className=\"fas fa-times text-xs\"></i>\n          </button>\n        </div>\n        {task.description && (\n          <p className=\"text-sm text-secondary mt-2 leading-relaxed\">{task.description}</p>\n        )}\n        {dueDateDisplay}\n      </div>\n    )\n  }\n\n  return (\n    <section className=\"content-section\">\n      <h2 className=\"text-3xl font-bold mb-6\">Task Planner</h2>\n      \n      {/* Add New Task Form */}\n      <div className=\"card p-8 mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-2xl font-bold text-primary\">Add New Task</h3>\n          <i className=\"fas fa-plus-square text-info text-2xl\"></i>\n        </div>\n        \n        <form onSubmit={addTask} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-400 mb-1\">Title</label>\n              <input \n                type=\"text\" \n                value={taskForm.title}\n                onChange={(e) => setTaskForm({ ...taskForm, title: e.target.value })}\n                className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                placeholder=\"Task title\" \n                required \n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-400 mb-1\">Due Date</label>\n              <input \n                type=\"date\" \n                value={taskForm.dueDate}\n                onChange={(e) => setTaskForm({ ...taskForm, dueDate: e.target.value })}\n                className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n              />\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-400 mb-1\">Description</label>\n            <textarea \n              rows=\"2\" \n              value={taskForm.description}\n              onChange={(e) => setTaskForm({ ...taskForm, description: e.target.value })}\n              className=\"w-full bg-gray-800 border border-gray-700 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n              placeholder=\"Task description\"\n            ></textarea>\n          </div>\n          \n          <div className=\"flex justify-end\">\n            <button type=\"submit\" className=\"btn-success px-8 py-3\">\n              <i className=\"fas fa-plus mr-2\"></i> Add Task\n            </button>\n          </div>\n        </form>\n      </div>\n      \n      {/* Kanban Board */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* To Do Column */}\n        <div className=\"kanban-column p-6\">\n          <h3 className=\"text-xl font-bold mb-6 flex items-center\">\n            <i className=\"fas fa-list-ul mr-3 text-info text-lg\"></i>\n            To Do\n            <span className=\"ml-auto status-applied text-sm px-3 py-1\">{tasks.todo.length}</span>\n          </h3>\n          \n          <div ref={todoRef} className=\"space-y-4 min-h-[300px]\">\n            {tasks.todo.length === 0 ? (\n              <div className=\"text-secondary text-center py-12\">\n                <i className=\"fas fa-plus-circle text-3xl mb-3 opacity-50\"></i>\n                <p>No tasks here</p>\n              </div>\n            ) : (\n              tasks.todo.map(renderTask)\n            )}\n          </div>\n        </div>\n        \n        {/* In Progress Column */}\n        <div className=\"kanban-column p-6\">\n          <h3 className=\"text-xl font-bold mb-6 flex items-center\">\n            <i className=\"fas fa-spinner mr-3 text-warning text-lg\"></i>\n            In Progress\n            <span className=\"ml-auto status-interview text-sm px-3 py-1\">{tasks.inProgress.length}</span>\n          </h3>\n          \n          <div ref={progressRef} className=\"space-y-4 min-h-[300px]\">\n            {tasks.inProgress.length === 0 ? (\n              <div className=\"text-secondary text-center py-12\">\n                <i className=\"fas fa-cog fa-spin text-3xl mb-3 opacity-50\"></i>\n                <p>No tasks here</p>\n              </div>\n            ) : (\n              tasks.inProgress.map(renderTask)\n            )}\n          </div>\n        </div>\n        \n        {/* Completed Column */}\n        <div className=\"kanban-column p-6\">\n          <h3 className=\"text-xl font-bold mb-6 flex items-center\">\n            <i className=\"fas fa-check-circle mr-3 text-success text-lg\"></i>\n            Completed\n            <span className=\"ml-auto status-placed text-sm px-3 py-1\">{tasks.completed.length}</span>\n          </h3>\n          \n          <div ref={completedRef} className=\"space-y-4 min-h-[300px]\">\n            {tasks.completed.length === 0 ? (\n              <div className=\"text-secondary text-center py-12\">\n                <i className=\"fas fa-check-circle text-3xl mb-3 opacity-50\"></i>\n                <p>No tasks here</p>\n              </div>\n            ) : (\n              tasks.completed.map(renderTask)\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Plan","size_bytes":10973},"src/components/Sidebar.jsx":{"content":"const Sidebar = ({ activeSection, setActiveSection }) => {\n  const handleResetData = () => {\n    if (window.confirm('Are you sure you want to reset all data? This action cannot be undone.')) {\n      localStorage.removeItem('placeTrackSessions')\n      localStorage.removeItem('placeTrackTasks')\n      localStorage.removeItem('placeTrackJobs')\n      window.location.reload()\n    }\n  }\n\n  return (\n    <aside className=\"sidebar w-64 h-screen fixed top-0 left-0 overflow-y-auto\">\n      <div className=\"p-4 flex flex-col h-full\">\n        <div className=\"mb-10\">\n          <h1 className=\"text-3xl font-bold mb-2 welcome-gradient\">LaunchLog</h1>\n          <p className=\"text-sm text-secondary leading-relaxed\">Like a launchpad for your career, logs all progress.</p>\n        </div>\n        \n        <nav className=\"space-y-2 flex-grow\">\n          <button\n            onClick={() => setActiveSection('dashboard')}\n            className={`nav-link flex items-center p-3 rounded-lg w-full text-left ${\n              activeSection === 'dashboard' ? 'active-nav' : 'hover:bg-gray-800'\n            }`}\n          >\n            <i className=\"fas fa-chart-line mr-3 w-5\"></i>\n            <span>Dashboard</span>\n          </button>\n          <button\n            onClick={() => setActiveSection('timer')}\n            className={`nav-link flex items-center p-3 rounded-lg w-full text-left ${\n              activeSection === 'timer' ? 'active-nav' : 'hover:bg-gray-800'\n            }`}\n          >\n            <i className=\"fas fa-clock mr-3 w-5\"></i>\n            <span>Timer</span>\n          </button>\n          <button\n            onClick={() => setActiveSection('plan')}\n            className={`nav-link flex items-center p-3 rounded-lg w-full text-left ${\n              activeSection === 'plan' ? 'active-nav' : 'hover:bg-gray-800'\n            }`}\n          >\n            <i className=\"fas fa-tasks mr-3 w-5\"></i>\n            <span>Plan</span>\n          </button>\n          <button\n            onClick={() => setActiveSection('jobs')}\n            className={`nav-link flex items-center p-3 rounded-lg w-full text-left ${\n              activeSection === 'jobs' ? 'active-nav' : 'hover:bg-gray-800'\n            }`}\n          >\n            <i className=\"fas fa-briefcase mr-3 w-5\"></i>\n            <span>Jobs Tracker</span>\n          </button>\n        </nav>\n        \n        <div className=\"mt-auto pt-6 border-t border-divider-lines\">\n          <button \n            onClick={handleResetData}\n            className=\"flex items-center p-3 text-danger hover:text-soft-coral-red w-full text-left rounded-lg transition-all hover:bg-elevated-bg\"\n          >\n            <i className=\"fas fa-trash-alt mr-3 text-lg\"></i>\n            <span className=\"font-medium\">Reset All Data</span>\n          </button>\n        </div>\n      </div>\n    </aside>\n  )\n}\n\nexport default Sidebar","size_bytes":2851},"src/components/Timer.jsx":{"content":"import { useState, useEffect, useRef } from 'react'\n\nconst Timer = ({ dataHook }) => {\n  const [timerMode, setTimerMode] = useState('pomodoro')\n  const [timeLeft, setTimeLeft] = useState(25 * 60)\n  const [isRunning, setIsRunning] = useState(false)\n  const [isPaused, setIsPaused] = useState(false)\n  const [isBreakTime, setIsBreakTime] = useState(false)\n  const [selectedSubject, setSelectedSubject] = useState('')\n  const [sessions, setSessions] = useState([])\n  const [timerStatus, setTimerStatus] = useState('Focus Time')\n  \n  const timerRef = useRef(null)\n  const timerStartTimeRef = useRef(null)\n\n  useEffect(() => {\n    if (dataHook && dataHook.data) {\n      setSessions(dataHook.data.timerSessions.slice(0, 10))\n    }\n  }, [dataHook?.data])\n\n  useEffect(() => {\n    if (timerMode === 'pomodoro') {\n      setTimerStatus(isBreakTime ? 'Break Time' : 'Focus Time')\n    } else {\n      setTimerStatus('Stopwatch')\n    }\n  }, [timerMode, isBreakTime])\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600)\n    const mins = Math.floor((seconds % 3600) / 60)\n    const secs = seconds % 60\n    \n    if (hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n    }\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n  }\n\n  const updateProgress = () => {\n    if (timerMode === 'pomodoro' && !isBreakTime) {\n      const totalSeconds = 25 * 60\n      return ((totalSeconds - timeLeft) / totalSeconds) * 100\n    } else if (timerMode === 'pomodoro' && isBreakTime) {\n      const totalSeconds = 5 * 60\n      return ((totalSeconds - timeLeft) / totalSeconds) * 100\n    }\n    return 0\n  }\n\n  const saveSession = async () => {\n    if (!selectedSubject || !dataHook) return\n    \n    let durationInSeconds\n    if (timerMode === 'pomodoro' && !isBreakTime) {\n      durationInSeconds = 25 * 60 - timeLeft\n    } else if (timerMode === 'stopwatch') {\n      durationInSeconds = timeLeft\n    } else {\n      return\n    }\n\n    if (durationInSeconds < 60) return\n\n    // Convert seconds to minutes for storage (this is what the Dashboard expects)\n    const durationInMinutes = Math.round(durationInSeconds / 60)\n\n    const session = {\n      id: Date.now().toString(),\n      subject: selectedSubject,\n      duration: durationInMinutes,\n      date: new Date().toISOString()\n    }\n\n    try {\n      await dataHook.saveTimerSession(session)\n      setSessions(prev => [session, ...prev.slice(0, 9)])\n    } catch (error) {\n      console.error('Failed to save session:', error)\n    }\n  }\n\n  const startTimer = () => {\n    if (!selectedSubject) {\n      alert('Please select a subject first')\n      return\n    }\n\n    setIsRunning(true)\n    setIsPaused(false)\n    timerStartTimeRef.current = Date.now()\n\n    if (timerMode === 'pomodoro') {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev > 0) {\n            return prev - 1\n          } else {\n            clearInterval(timerRef.current)\n            \n            if (!isBreakTime) {\n              saveSession()\n              setIsBreakTime(true)\n              setTimeLeft(5 * 60)\n              setTimeout(() => startTimer(), 100)\n            } else {\n              setIsBreakTime(false)\n              setTimeLeft(25 * 60)\n              setIsRunning(false)\n              alert('Pomodoro cycle completed!')\n            }\n            return prev\n          }\n        })\n      }, 1000)\n    } else {\n      timerRef.current = setInterval(() => {\n        const elapsed = Math.floor((Date.now() - timerStartTimeRef.current) / 1000)\n        setTimeLeft(elapsed)\n      }, 1000)\n    }\n  }\n\n  const pauseTimer = () => {\n    clearInterval(timerRef.current)\n    setIsPaused(true)\n  }\n\n  const resetTimer = () => {\n    clearInterval(timerRef.current)\n    setIsRunning(false)\n    setIsPaused(false)\n    \n    if (timerMode === 'pomodoro') {\n      setTimeLeft(25 * 60)\n      setIsBreakTime(false)\n    } else {\n      if (timeLeft > 0) {\n        saveSession()\n      }\n      setTimeLeft(0)\n    }\n  }\n\n  const switchToPomodoro = () => {\n    if (isRunning) resetTimer()\n    setTimerMode('pomodoro')\n    setTimeLeft(25 * 60)\n    setIsBreakTime(false)\n  }\n\n  const switchToStopwatch = () => {\n    if (isRunning) resetTimer()\n    setTimerMode('stopwatch')\n    setTimeLeft(0)\n  }\n\n  return (\n    <section className=\"content-section\">\n      <h2 className=\"text-3xl font-bold mb-6\">Focus Timer</h2>\n      \n      <div className=\"flex flex-col md:flex-row gap-8\">\n        {/* Timer Card */}\n        <div className=\"card p-8 flex-1\">\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-semibold text-secondary mb-3\">Select Subject</label>\n            <select \n              value={selectedSubject}\n              onChange={(e) => setSelectedSubject(e.target.value)}\n              className=\"w-full\"\n            >\n              <option value=\"\">Select a subject...</option>\n              <option value=\"Data Structures\">Data Structures</option>\n              <option value=\"Algorithms\">Algorithms</option>\n              <option value=\"System Design\">System Design</option>\n              <option value=\"Web Development\">Web Development</option>\n              <option value=\"Database\">Database</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n\n          <div className=\"mb-8\">\n            <label className=\"block text-sm font-semibold text-secondary mb-3\">Timer Mode</label>\n            <div className=\"flex space-x-4\">\n              <button \n                onClick={switchToPomodoro}\n                className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all ${\n                  timerMode === 'pomodoro' \n                    ? 'btn-primary' \n                    : 'btn-secondary'\n                }`}\n              >\n                <i className=\"fas fa-hourglass-half mr-2\"></i> Pomodoro\n              </button>\n              <button \n                onClick={switchToStopwatch}\n                className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all ${\n                  timerMode === 'stopwatch' \n                    ? 'btn-primary' \n                    : 'btn-secondary'\n                }`}\n              >\n                <i className=\"fas fa-stopwatch mr-2\"></i> Stopwatch\n              </button>\n            </div>\n          </div>\n\n          {/* Timer Display */}\n          <div className=\"flex flex-col items-center mb-8\">\n            <div className=\"timer-display mb-4\">{formatTime(timeLeft)}</div>\n            <div className=\"text-lg text-info font-medium mb-6\">{timerStatus}</div>\n            <div className=\"w-full progress-bar h-3 mb-6\">\n              <div \n                className=\"progress-fill h-3 transition-all duration-500\"\n                style={{ width: `${updateProgress()}%` }}\n              ></div>\n            </div>\n          </div>\n\n          {/* Timer Controls */}\n          <div className=\"flex justify-center space-x-4\">\n            <button \n              onClick={startTimer}\n              disabled={isRunning && !isPaused}\n              className=\"btn-success px-8 py-4 text-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <i className=\"fas fa-play mr-2\"></i> {isPaused ? 'Resume' : 'Start'}\n            </button>\n            <button \n              onClick={pauseTimer}\n              disabled={!isRunning || isPaused}\n              className=\"btn-warning px-6 py-4 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <i className=\"fas fa-pause mr-2\"></i> Pause\n            </button>\n            <button \n              onClick={resetTimer}\n              disabled={!isRunning && !isPaused}\n              className=\"btn-secondary px-6 py-4 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <i className=\"fas fa-redo mr-2\"></i> Reset\n            </button>\n          </div>\n        </div>\n\n        {/* Session History */}\n        <div className=\"card p-6 flex-1\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-xl font-semibold text-primary\">Recent Sessions</h3>\n            <i className=\"fas fa-history text-info text-lg\"></i>\n          </div>\n          \n          <div className=\"overflow-y-auto max-h-96\">\n            <div className=\"space-y-3\">\n              {sessions.length === 0 ? (\n                <div className=\"text-secondary text-center py-12\">\n                  <i className=\"fas fa-clock text-4xl mb-4 opacity-50\"></i>\n                  <p>No sessions recorded yet</p>\n                </div>\n              ) : (\n                sessions.map((session) => {\n                  const date = new Date(session.date)\n                  // session.duration is stored in minutes\n                  const totalMinutes = session.duration\n                  const hours = Math.floor(totalMinutes / 60)\n                  const minutes = totalMinutes % 60\n                  const timeText = hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`\n                  \n                  // Convert minutes to seconds for formatTime function\n                  const timeInSeconds = totalMinutes * 60\n                  \n                  return (\n                    <div key={session.id} className=\"stat-card mb-3\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"font-semibold text-primary\">{session.subject}</span>\n                        <span className=\"text-sm text-secondary\">{date.toLocaleDateString()}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-success flex items-center\">\n                          <i className=\"fas fa-clock mr-2\"></i> {timeText}\n                        </span>\n                        <span className=\"status-applied text-xs px-3 py-1\">{formatTime(timeInSeconds)}</span>\n                      </div>\n                    </div>\n                  )\n                })\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Timer","size_bytes":10231},"src/components/Cover.jsx":{"content":"import { useState } from 'react'\n\nconst Cover = ({ onEnter }) => {\n  const [isAnimating, setIsAnimating] = useState(false)\n\n  const handleEnter = () => {\n    setIsAnimating(true)\n    setTimeout(() => {\n      onEnter()\n    }, 800)\n  }\n\n  return (\n    <div className={`cover-page ${isAnimating ? 'cover-exit' : ''}`}>\n      <div className=\"cover-content\">\n        {/* Background Elements */}\n        <div className=\"cover-bg-elements\">\n          <div className=\"floating-element element-1\">\n            <i className=\"fas fa-rocket\"></i>\n          </div>\n          <div className=\"floating-element element-2\">\n            <i className=\"fas fa-chart-line\"></i>\n          </div>\n          <div className=\"floating-element element-3\">\n            <i className=\"fas fa-target\"></i>\n          </div>\n          <div className=\"floating-element element-4\">\n            <i className=\"fas fa-briefcase\"></i>\n          </div>\n          <div className=\"floating-element element-5\">\n            <i className=\"fas fa-clock\"></i>\n          </div>\n          <div className=\"floating-element element-6\">\n            <i className=\"fas fa-trophy\"></i>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"cover-main\">\n          <div className=\"cover-logo\">\n            <div className=\"logo-icon\">\n              <i className=\"fas fa-rocket\"></i>\n            </div>\n            <h1 className=\"logo-text\">LaunchLog</h1>\n          </div>\n\n          <div className=\"cover-tagline\">\n            <p className=\"tagline-main\">Like a launchpad for your career</p>\n            <p className=\"tagline-sub\">logs all progress.</p>\n          </div>\n\n          <div className=\"cover-features\">\n            <div className=\"feature-item\">\n              <i className=\"fas fa-chart-line\"></i>\n              <span>Track Progress</span>\n            </div>\n            <div className=\"feature-item\">\n              <i className=\"fas fa-clock\"></i>\n              <span>Focus Timer</span>\n            </div>\n            <div className=\"feature-item\">\n              <i className=\"fas fa-tasks\"></i>\n              <span>Task Planner</span>\n            </div>\n            <div className=\"feature-item\">\n              <i className=\"fas fa-briefcase\"></i>\n              <span>Job Tracker</span>\n            </div>\n          </div>\n\n          <button \n            className=\"cover-enter-btn\"\n            onClick={handleEnter}\n            disabled={isAnimating}\n          >\n            <span>Launch Your Career</span>\n            <i className=\"fas fa-arrow-right\"></i>\n          </button>\n\n          <div className=\"cover-footer\">\n            <p>Start tracking your career journey today</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Cover","size_bytes":2752},"server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst { MongoClient } = require('mongodb');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', message: 'LaunchLog API is running' });\n});\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// MongoDB connection\nlet db;\nlet isConnected = false;\nconst client = new MongoClient(process.env.MONGODB_CONNECTION_STRING, {\n  serverApi: {\n    version: '1',\n    strict: true,\n    deprecationErrors: true,\n  }\n});\n\nasync function connectToDatabase() {\n  try {\n    await client.connect();\n    await client.db('admin').command({ ping: 1 });\n    db = client.db('launchlog');\n    isConnected = true;\n    console.log('✅ Connected to MongoDB');\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    console.log('⚠️ Running in fallback mode - data will not persist');\n    isConnected = false;\n  }\n}\n\n// API Routes\n\n// In-memory fallback storage\nlet fallbackData = {\n  userId: 'default',\n  timerSessions: [],\n  tasks: { todo: [], doing: [], done: [] },\n  jobs: [],\n  dashboardData: {\n    totalHours: 0,\n    completedTasks: 0,\n    activeApplications: 0,\n    sessionsThisWeek: 0\n  }\n};\n\n// Get user data\napp.get('/api/user-data', async (req, res) => {\n  try {\n    if (!isConnected) {\n      return res.json(fallbackData);\n    }\n\n    const userData = await db.collection('userData').findOne({ userId: 'default' });\n    if (!userData) {\n      const defaultData = {\n        userId: 'default',\n        timerSessions: [],\n        tasks: { todo: [], doing: [], done: [] },\n        jobs: [],\n        dashboardData: {\n          totalHours: 0,\n          completedTasks: 0,\n          activeApplications: 0,\n          sessionsThisWeek: 0\n        }\n      };\n      res.json(defaultData);\n    } else {\n      res.json(userData);\n    }\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    res.json(fallbackData);\n  }\n});\n\n// Save timer session\napp.post('/api/timer-sessions', async (req, res) => {\n  try {\n    const { session } = req.body;\n    \n    if (!isConnected) {\n      fallbackData.timerSessions.push(session);\n      return res.json({ success: true, fallback: true });\n    }\n\n    await db.collection('userData').updateOne(\n      { userId: 'default' },\n      { \n        $push: { timerSessions: session },\n        $setOnInsert: { userId: 'default' }\n      },\n      { upsert: true }\n    );\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error saving timer session:', error);\n    fallbackData.timerSessions.push(session);\n    res.json({ success: true, fallback: true });\n  }\n});\n\n// Update tasks\napp.put('/api/tasks', async (req, res) => {\n  try {\n    const { tasks } = req.body;\n    \n    if (!isConnected) {\n      fallbackData.tasks = tasks;\n      return res.json({ success: true, fallback: true });\n    }\n\n    await db.collection('userData').updateOne(\n      { userId: 'default' },\n      { \n        $set: { tasks },\n        $setOnInsert: { userId: 'default' }\n      },\n      { upsert: true }\n    );\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error updating tasks:', error);\n    fallbackData.tasks = tasks;\n    res.json({ success: true, fallback: true });\n  }\n});\n\n// Save job application\napp.post('/api/jobs', async (req, res) => {\n  try {\n    const { job } = req.body;\n    \n    if (!isConnected) {\n      fallbackData.jobs.push(job);\n      return res.json({ success: true, fallback: true });\n    }\n\n    await db.collection('userData').updateOne(\n      { userId: 'default' },\n      { \n        $push: { jobs: job },\n        $setOnInsert: { userId: 'default' }\n      },\n      { upsert: true }\n    );\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error saving job:', error);\n    fallbackData.jobs.push(job);\n    res.json({ success: true, fallback: true });\n  }\n});\n\n// Update job application\napp.put('/api/jobs/:jobId', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    const { updatedJob } = req.body;\n    \n    if (!isConnected) {\n      const jobIndex = fallbackData.jobs.findIndex(job => job.id === jobId);\n      if (jobIndex !== -1) {\n        fallbackData.jobs[jobIndex] = updatedJob;\n      }\n      return res.json({ success: true, fallback: true });\n    }\n    \n    await db.collection('userData').updateOne(\n      { userId: 'default', 'jobs.id': jobId },\n      { $set: { 'jobs.$': updatedJob } }\n    );\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error updating job:', error);\n    const jobIndex = fallbackData.jobs.findIndex(job => job.id === jobId);\n    if (jobIndex !== -1) {\n      fallbackData.jobs[jobIndex] = updatedJob;\n    }\n    res.json({ success: true, fallback: true });\n  }\n});\n\n// Delete job application\napp.delete('/api/jobs/:jobId', async (req, res) => {\n  try {\n    const { jobId } = req.params;\n    \n    if (!isConnected) {\n      fallbackData.jobs = fallbackData.jobs.filter(job => job.id !== jobId);\n      return res.json({ success: true, fallback: true });\n    }\n    \n    await db.collection('userData').updateOne(\n      { userId: 'default' },\n      { $pull: { jobs: { id: jobId } } }\n    );\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting job:', error);\n    fallbackData.jobs = fallbackData.jobs.filter(job => job.id !== jobId);\n    res.json({ success: true, fallback: true });\n  }\n});\n\n// Update dashboard data\napp.put('/api/dashboard', async (req, res) => {\n  try {\n    const { dashboardData } = req.body;\n    \n    if (!isConnected) {\n      fallbackData.dashboardData = dashboardData;\n      return res.json({ success: true, fallback: true });\n    }\n    \n    await db.collection('userData').updateOne(\n      { userId: 'default' },\n      { \n        $set: { dashboardData },\n        $setOnInsert: { userId: 'default' }\n      },\n      { upsert: true }\n    );\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error updating dashboard data:', error);\n    fallbackData.dashboardData = dashboardData;\n    res.json({ success: true, fallback: true });\n  }\n});\n\n// Reset all data\napp.delete('/api/reset', async (req, res) => {\n  try {\n    fallbackData = {\n      userId: 'default',\n      timerSessions: [],\n      tasks: { todo: [], doing: [], done: [] },\n      jobs: [],\n      dashboardData: { totalHours: 0, completedTasks: 0, activeApplications: 0, sessionsThisWeek: 0 }\n    };\n    \n    if (isConnected) {\n      await db.collection('userData').deleteOne({ userId: 'default' });\n    }\n    \n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error resetting data:', error);\n    res.json({ success: true, fallback: true });\n  }\n});\n\n// Start server\nconnectToDatabase().then(() => {\n  app.listen(PORT, '0.0.0.0', () => {\n    console.log(`🚀 Server running on port ${PORT}`);\n  });\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('Closing MongoDB connection...');\n  await client.close();\n  process.exit(0);\n});","size_bytes":7085},"src/hooks/useData.js":{"content":"import { useState, useEffect } from 'react';\nimport { apiService } from '../utils/api';\n\nexport const useData = () => {\n  const [data, setData] = useState({\n    timerSessions: [],\n    tasks: { todo: [], doing: [], done: [] },\n    jobs: [],\n    dashboardData: {\n      totalHours: 0,\n      completedTasks: 0,\n      activeApplications: 0,\n      sessionsThisWeek: 0\n    }\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load data from MongoDB on component mount\n  useEffect(() => {\n    loadUserData();\n  }, []);\n\n  const loadUserData = async () => {\n    try {\n      setLoading(true);\n      const userData = await apiService.getUserData();\n      setData(userData);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to load user data:', err);\n      setError('Failed to load user data');\n      // Fallback to localStorage if API fails\n      loadFromLocalStorage();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadFromLocalStorage = () => {\n    try {\n      const timerSessions = JSON.parse(localStorage.getItem('timerSessions') || '[]');\n      const tasks = JSON.parse(localStorage.getItem('kanbanTasks') || '{\"todo\":[],\"doing\":[],\"done\":[]}');\n      const jobs = JSON.parse(localStorage.getItem('jobApplications') || '[]');\n      const dashboardData = {\n        totalHours: timerSessions.reduce((total, session) => total + (session.duration || 0), 0) / 60,\n        completedTasks: tasks.done?.length || 0,\n        activeApplications: jobs.filter(job => job.status !== 'Rejected' && job.status !== 'Placed').length,\n        sessionsThisWeek: timerSessions.filter(session => {\n          const sessionDate = new Date(session.date);\n          const weekAgo = new Date();\n          weekAgo.setDate(weekAgo.getDate() - 7);\n          return sessionDate >= weekAgo;\n        }).length\n      };\n      \n      setData({ timerSessions, tasks, jobs, dashboardData });\n    } catch (err) {\n      console.error('Failed to load from localStorage:', err);\n    }\n  };\n\n  // Save timer session\n  const saveTimerSession = async (session) => {\n    try {\n      await apiService.saveTimerSession(session);\n      setData(prev => ({\n        ...prev,\n        timerSessions: [...prev.timerSessions, session]\n      }));\n      updateDashboardData();\n    } catch (err) {\n      console.error('Failed to save timer session:', err);\n      // Fallback to localStorage\n      const sessions = [...data.timerSessions, session];\n      localStorage.setItem('timerSessions', JSON.stringify(sessions));\n      setData(prev => ({ ...prev, timerSessions: sessions }));\n    }\n  };\n\n  // Update tasks\n  const updateTasks = async (newTasks) => {\n    try {\n      await apiService.updateTasks(newTasks);\n      setData(prev => ({ ...prev, tasks: newTasks }));\n      updateDashboardData();\n    } catch (err) {\n      console.error('Failed to update tasks:', err);\n      // Fallback to localStorage\n      localStorage.setItem('kanbanTasks', JSON.stringify(newTasks));\n      setData(prev => ({ ...prev, tasks: newTasks }));\n    }\n  };\n\n  // Save job\n  const saveJob = async (job) => {\n    try {\n      await apiService.saveJob(job);\n      setData(prev => ({\n        ...prev,\n        jobs: [...prev.jobs, job]\n      }));\n      updateDashboardData();\n    } catch (err) {\n      console.error('Failed to save job:', err);\n      // Fallback to localStorage\n      const jobs = [...data.jobs, job];\n      localStorage.setItem('jobApplications', JSON.stringify(jobs));\n      setData(prev => ({ ...prev, jobs }));\n    }\n  };\n\n  // Update job\n  const updateJob = async (jobId, updatedJob) => {\n    try {\n      await apiService.updateJob(jobId, updatedJob);\n      setData(prev => ({\n        ...prev,\n        jobs: prev.jobs.map(job => job.id === jobId ? updatedJob : job)\n      }));\n      updateDashboardData();\n    } catch (err) {\n      console.error('Failed to update job:', err);\n      // Fallback to localStorage\n      const jobs = data.jobs.map(job => job.id === jobId ? updatedJob : job);\n      localStorage.setItem('jobApplications', JSON.stringify(jobs));\n      setData(prev => ({ ...prev, jobs }));\n    }\n  };\n\n  // Delete job\n  const deleteJob = async (jobId) => {\n    try {\n      await apiService.deleteJob(jobId);\n      setData(prev => ({\n        ...prev,\n        jobs: prev.jobs.filter(job => job.id !== jobId)\n      }));\n      updateDashboardData();\n    } catch (err) {\n      console.error('Failed to delete job:', err);\n      // Fallback to localStorage\n      const jobs = data.jobs.filter(job => job.id !== jobId);\n      localStorage.setItem('jobApplications', JSON.stringify(jobs));\n      setData(prev => ({ ...prev, jobs }));\n    }\n  };\n\n  // Update dashboard data\n  const updateDashboardData = async () => {\n    const newDashboardData = {\n      totalHours: data.timerSessions.reduce((total, session) => total + (session.duration || 0), 0) / 60,\n      completedTasks: data.tasks.done?.length || 0,\n      activeApplications: data.jobs.filter(job => job.status !== 'Rejected' && job.status !== 'Placed').length,\n      sessionsThisWeek: data.timerSessions.filter(session => {\n        const sessionDate = new Date(session.date);\n        const weekAgo = new Date();\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        return sessionDate >= weekAgo;\n      }).length\n    };\n\n    try {\n      await apiService.updateDashboard(newDashboardData);\n      setData(prev => ({ ...prev, dashboardData: newDashboardData }));\n    } catch (err) {\n      console.error('Failed to update dashboard data:', err);\n      setData(prev => ({ ...prev, dashboardData: newDashboardData }));\n    }\n  };\n\n  // Reset all data\n  const resetAllData = async () => {\n    try {\n      await apiService.resetAllData();\n      const defaultData = {\n        timerSessions: [],\n        tasks: { todo: [], doing: [], done: [] },\n        jobs: [],\n        dashboardData: { totalHours: 0, completedTasks: 0, activeApplications: 0, sessionsThisWeek: 0 }\n      };\n      setData(defaultData);\n      \n      // Also clear localStorage as backup\n      localStorage.clear();\n    } catch (err) {\n      console.error('Failed to reset data:', err);\n      // Fallback to localStorage clear\n      localStorage.clear();\n      const defaultData = {\n        timerSessions: [],\n        tasks: { todo: [], doing: [], done: [] },\n        jobs: [],\n        dashboardData: { totalHours: 0, completedTasks: 0, activeApplications: 0, sessionsThisWeek: 0 }\n      };\n      setData(defaultData);\n    }\n  };\n\n  return {\n    data,\n    loading,\n    error,\n    saveTimerSession,\n    updateTasks,\n    saveJob,\n    updateJob,\n    deleteJob,\n    resetAllData,\n    refreshData: loadUserData\n  };\n};","size_bytes":6657},"src/utils/api.js":{"content":"// Use relative URL for API calls in production, localhost for development\nconst API_BASE_URL = '';\n\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n        ...options,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Get all user data\n  async getUserData() {\n    return this.makeRequest('/api/user-data');\n  }\n\n  // Save timer session\n  async saveTimerSession(session) {\n    return this.makeRequest('/api/timer-sessions', {\n      method: 'POST',\n      body: JSON.stringify({ session }),\n    });\n  }\n\n  // Update tasks\n  async updateTasks(tasks) {\n    return this.makeRequest('/api/tasks', {\n      method: 'PUT',\n      body: JSON.stringify({ tasks }),\n    });\n  }\n\n  // Save job application\n  async saveJob(job) {\n    return this.makeRequest('/api/jobs', {\n      method: 'POST',\n      body: JSON.stringify({ job }),\n    });\n  }\n\n  // Update job application\n  async updateJob(jobId, updatedJob) {\n    return this.makeRequest(`/api/jobs/${jobId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ updatedJob }),\n    });\n  }\n\n  // Delete job application\n  async deleteJob(jobId) {\n    return this.makeRequest(`/api/jobs/${jobId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Update dashboard data\n  async updateDashboard(dashboardData) {\n    return this.makeRequest('/api/dashboard', {\n      method: 'PUT',\n      body: JSON.stringify({ dashboardData }),\n    });\n  }\n\n  // Reset all data\n  async resetAllData() {\n    return this.makeRequest('/api/reset', {\n      method: 'DELETE',\n    });\n  }\n}\n\nexport const apiService = new ApiService();","size_bytes":1946}},"version":1}